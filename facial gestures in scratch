import cv2
import mediapipe as mp
import numpy as np
import time

class Facial_recognition:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)
        self.mp_face_mesh = mp.solutions.face_mesh
        self.face_mesh = self.mp_face_mesh.FaceMesh(min_detection_confidence=0.8, min_tracking_confidence=0.8)
        self.mp_drawing = mp.solutions.drawing_utils
        self.drawing_spec = self.mp_drawing.DrawingSpec(thickness=1, circle_radius=1)
        self.face_2d = None
        self.face_3d = None

    def get_coordinates(self):
        while self.cap.isOpened():
            success, vid = self.cap.read()
            if not success:
                break
            start = time.time()
            img = cv2.cvtColor(cv2.flip(vid, 1), cv2.COLOR_BGR2RGB)
            img.flags.writeable = False
            results = self.face_mesh.process(img)
            img.flags.writeable = True
            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
            img_h, img_w, img_c = img.shape
            self.face_3d = []
            self.face_2d = []

            if results.multi_face_landmarks:
                for face_landmarks in results.multi_face_landmarks:
                    for idx, lm in enumerate(face_landmarks.landmark):
                        # Key points between eyes (for drowsiness detection)
                        if idx == 1:  # Nose tip (between eyes)
                            nose_2d = (lm.x * img_w, lm.y * img_h)
                            nose_3d = (lm.x * img_w, lm.y * img_h, lm.z * 3000)
                            nose_y = lm.y * img_h
                        # Forehead points and eyebrow points
                        if idx in [10, 338]:  # Forehead
                            forehead_y = lm.y * img_h
                        if idx in [107, 336]:  # Eyebrow points
                            eyebrow_y = lm.y * img_h

                        x, y = int(lm.x * img_w), int(lm.y * img_h)
                        self.face_2d.append([x, y])
                        self.face_3d.append([x, y, lm.z])

                # Calculate the distance between forehead and eyebrow
                forehead_eyebrow_dist = abs(forehead_y - eyebrow_y)
                nose_position_drop = abs(nose_y - eyebrow_y)  # Dropping of nose position as a sign of tiredness

                # Thresholds for classifying tiredness
                tired_threshold_dist = 10  # Adjust this threshold based on testing
                tired_threshold_nose_drop = 20  # Adjust for nose drop

                # Check for tiredness
                if forehead_eyebrow_dist < tired_threshold_dist and nose_position_drop > tired_threshold_nose_drop:
                    tired_status = "Tired"
                else:
                    tired_status = "Normal"

                # Print the tiredness status in the terminal
                print(f'Tiredness Status: {tired_status}')

            end = time.time()
            totalTime = end - start
            fps = 1 / totalTime
            print(f"FPS: {fps}")

            # Draw landmarks
            if results.multi_face_landmarks:
                for face_landmarks in results.multi_face_landmarks:
                    self.mp_drawing.draw_landmarks(image=img,
                                                   landmark_list=face_landmarks,
                                                   landmark_drawing_spec=self.drawing_spec)

            cv2.imshow('Tiredness Detection', img)

            if cv2.waitKey(5) & 0xFF == 27:
                break

        self.cap.release()
        cv2.destroyAllWindows()

    def facial_recognize(self):
        pass


def main():
    model = Facial_recognition()
    model.get_coordinates()

if __name__ == "__main__":
    main()
